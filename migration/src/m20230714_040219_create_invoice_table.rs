use entity::invoice;
use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .create_table(
                Table::create()
                    .table(invoice::Entity)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(invoice::Column::Id)
                            .integer()
                            .not_null()
                            .auto_increment()
                            .primary_key(),
                    )
                    .col(ColumnDef::new(invoice::Column::UserId).integer().not_null())
                    .col(
                        ColumnDef::new(invoice::Column::UserPubkey)
                            .binary_len(32)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Payee)
                            .binary_len(33)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Type)
                            .integer()
                            .not_null()
                            .default(0),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Status)
                            .integer()
                            .not_null()
                            .default(0),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Source)
                            .string()
                            .not_null()
                            .default("".to_owned()),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Service)
                            .string()
                            .not_null()
                            .default("".to_owned()),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::PaymentHash)
                            .binary_len(32)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::PaymentPreimage)
                            .binary_len(32)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::CreatedAt)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::UpdatedAt)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::GeneratedAt)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Expiry)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::ExpiredAt)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Description)
                            .text()
                            .not_null()
                            .default("".to_owned()),
                    )
                    .col(ColumnDef::new(invoice::Column::Bolt11).text().not_null())
                    .col(
                        ColumnDef::new(invoice::Column::Amount)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::PaidAmount)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Fee)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Total)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::PaidAt)
                            .big_integer()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::LockAmount)
                            .big_integer()
                            .not_null()
                            .default(0),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Internal)
                            .boolean()
                            .not_null()
                            .default(false),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Duplicate)
                            .boolean()
                            .not_null()
                            .default(false),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::ServiceFee)
                            .big_integer()
                            .not_null(),
                    )
                    .col(ColumnDef::new(invoice::Column::Comment).text().null())
                    .col(ColumnDef::new(invoice::Column::Payer).text().null())
                    .col(ColumnDef::new(invoice::Column::PayerName).string().null())
                    .col(ColumnDef::new(invoice::Column::PayerEmail).string().null())
                    .col(
                        ColumnDef::new(invoice::Column::PayerPubkey)
                            .binary_len(32)
                            .null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::Zap)
                            .boolean()
                            .not_null()
                            .default(false),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::ZapStatus)
                            .integer()
                            .not_null()
                            .default(0),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::ZapFrom)
                            .binary_len(32)
                            .null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::ZapPubkey)
                            .binary_len(32)
                            .null(),
                    )
                    .col(
                        ColumnDef::new(invoice::Column::ZapEvent)
                            .binary_len(32)
                            .null(),
                    )
                    .col(ColumnDef::new(invoice::Column::ZapReceipt).text().null())
                    .to_owned(),
            )
            .await?;

        manager
            .create_index(
                Index::create()
                    .if_not_exists()
                    .name("uq_invoice_type_payment_hash")
                    .col(invoice::Column::Type)
                    .col(invoice::Column::PaymentHash)
                    .table(invoice::Entity)
                    .unique()
                    .to_owned(),
            )
            .await?;

        manager
            .create_index(
                Index::create()
                    .if_not_exists()
                    .name("idx_invoice_type_status")
                    .col(invoice::Column::Type)
                    .col(invoice::Column::Status)
                    .table(invoice::Entity)
                    .to_owned(),
            )
            .await?;

        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_index(
                Index::drop()
                    .name("uq_invoice_type_payment_hash")
                    .to_owned(),
            )
            .await?;

        manager
            .drop_index(Index::drop().name("idx_invoice_type_status").to_owned())
            .await?;

        manager
            .drop_table(Table::drop().table(invoice::Entity).to_owned())
            .await
    }
}
